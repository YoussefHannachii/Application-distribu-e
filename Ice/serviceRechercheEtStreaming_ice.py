# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `serviceRechercheEtStreaming.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module MonModule
_M_MonModule = Ice.openModule('MonModule')
__name__ = 'MonModule'

if 'Song' not in _M_MonModule.__dict__:
    _M_MonModule.Song = Ice.createTempClass()
    class Song(object):
        def __init__(self, title='', artist='', type='', dateofrelease='', emplacement=''):
            self.title = title
            self.artist = artist
            self.type = type
            self.dateofrelease = dateofrelease
            self.emplacement = emplacement

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.title)
            _h = 5 * _h + Ice.getHash(self.artist)
            _h = 5 * _h + Ice.getHash(self.type)
            _h = 5 * _h + Ice.getHash(self.dateofrelease)
            _h = 5 * _h + Ice.getHash(self.emplacement)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_MonModule.Song):
                return NotImplemented
            else:
                if self.title is None or other.title is None:
                    if self.title != other.title:
                        return (-1 if self.title is None else 1)
                else:
                    if self.title < other.title:
                        return -1
                    elif self.title > other.title:
                        return 1
                if self.artist is None or other.artist is None:
                    if self.artist != other.artist:
                        return (-1 if self.artist is None else 1)
                else:
                    if self.artist < other.artist:
                        return -1
                    elif self.artist > other.artist:
                        return 1
                if self.type is None or other.type is None:
                    if self.type != other.type:
                        return (-1 if self.type is None else 1)
                else:
                    if self.type < other.type:
                        return -1
                    elif self.type > other.type:
                        return 1
                if self.dateofrelease is None or other.dateofrelease is None:
                    if self.dateofrelease != other.dateofrelease:
                        return (-1 if self.dateofrelease is None else 1)
                else:
                    if self.dateofrelease < other.dateofrelease:
                        return -1
                    elif self.dateofrelease > other.dateofrelease:
                        return 1
                if self.emplacement is None or other.emplacement is None:
                    if self.emplacement != other.emplacement:
                        return (-1 if self.emplacement is None else 1)
                else:
                    if self.emplacement < other.emplacement:
                        return -1
                    elif self.emplacement > other.emplacement:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_MonModule._t_Song)

        __repr__ = __str__

    _M_MonModule._t_Song = IcePy.defineStruct('::MonModule::Song', Song, (), (
        ('title', (), IcePy._t_string),
        ('artist', (), IcePy._t_string),
        ('type', (), IcePy._t_string),
        ('dateofrelease', (), IcePy._t_string),
        ('emplacement', (), IcePy._t_string)
    ))

    _M_MonModule.Song = Song
    del Song

if 'SongNotFoundException' not in _M_MonModule.__dict__:
    _M_MonModule.SongNotFoundException = Ice.createTempClass()
    class SongNotFoundException(Ice.UserException):
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::MonModule::SongNotFoundException'

    _M_MonModule._t_SongNotFoundException = IcePy.defineException('::MonModule::SongNotFoundException', SongNotFoundException, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    SongNotFoundException._ice_type = _M_MonModule._t_SongNotFoundException

    _M_MonModule.SongNotFoundException = SongNotFoundException
    del SongNotFoundException

_M_MonModule._t_MonInterface = IcePy.defineValue('::MonModule::MonInterface', Ice.Value, -1, (), False, True, None, ())

if 'MonInterfacePrx' not in _M_MonModule.__dict__:
    _M_MonModule.MonInterfacePrx = Ice.createTempClass()
    class MonInterfacePrx(Ice.ObjectPrx):

        def getSongByTitle(self, title, context=None):
            return _M_MonModule.MonInterface._op_getSongByTitle.invoke(self, ((title, ), context))

        def getSongByTitleAsync(self, title, context=None):
            return _M_MonModule.MonInterface._op_getSongByTitle.invokeAsync(self, ((title, ), context))

        def begin_getSongByTitle(self, title, _response=None, _ex=None, _sent=None, context=None):
            return _M_MonModule.MonInterface._op_getSongByTitle.begin(self, ((title, ), _response, _ex, _sent, context))

        def end_getSongByTitle(self, _r):
            return _M_MonModule.MonInterface._op_getSongByTitle.end(self, _r)

        def getSongByArtist(self, artist, context=None):
            return _M_MonModule.MonInterface._op_getSongByArtist.invoke(self, ((artist, ), context))

        def getSongByArtistAsync(self, artist, context=None):
            return _M_MonModule.MonInterface._op_getSongByArtist.invokeAsync(self, ((artist, ), context))

        def begin_getSongByArtist(self, artist, _response=None, _ex=None, _sent=None, context=None):
            return _M_MonModule.MonInterface._op_getSongByArtist.begin(self, ((artist, ), _response, _ex, _sent, context))

        def end_getSongByArtist(self, _r):
            return _M_MonModule.MonInterface._op_getSongByArtist.end(self, _r)

        def streamAudio(self, songPath, context=None):
            return _M_MonModule.MonInterface._op_streamAudio.invoke(self, ((songPath, ), context))

        def streamAudioAsync(self, songPath, context=None):
            return _M_MonModule.MonInterface._op_streamAudio.invokeAsync(self, ((songPath, ), context))

        def begin_streamAudio(self, songPath, _response=None, _ex=None, _sent=None, context=None):
            return _M_MonModule.MonInterface._op_streamAudio.begin(self, ((songPath, ), _response, _ex, _sent, context))

        def end_streamAudio(self, _r):
            return _M_MonModule.MonInterface._op_streamAudio.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_MonModule.MonInterfacePrx.ice_checkedCast(proxy, '::MonModule::MonInterface', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_MonModule.MonInterfacePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::MonModule::MonInterface'
    _M_MonModule._t_MonInterfacePrx = IcePy.defineProxy('::MonModule::MonInterface', MonInterfacePrx)

    _M_MonModule.MonInterfacePrx = MonInterfacePrx
    del MonInterfacePrx

    _M_MonModule.MonInterface = Ice.createTempClass()
    class MonInterface(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::MonModule::MonInterface')

        def ice_id(self, current=None):
            return '::MonModule::MonInterface'

        @staticmethod
        def ice_staticId():
            return '::MonModule::MonInterface'

        def getSongByTitle(self, title, current=None):
            raise NotImplementedError("servant method 'getSongByTitle' not implemented")

        def getSongByArtist(self, artist, current=None):
            raise NotImplementedError("servant method 'getSongByArtist' not implemented")

        def streamAudio(self, songPath, current=None):
            raise NotImplementedError("servant method 'streamAudio' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_MonModule._t_MonInterfaceDisp)

        __repr__ = __str__

    _M_MonModule._t_MonInterfaceDisp = IcePy.defineClass('::MonModule::MonInterface', MonInterface, (), None, ())
    MonInterface._ice_type = _M_MonModule._t_MonInterfaceDisp

    MonInterface._op_getSongByTitle = IcePy.Operation('getSongByTitle', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_MonModule._t_Song, False, 0), (_M_MonModule._t_SongNotFoundException,))
    MonInterface._op_getSongByArtist = IcePy.Operation('getSongByArtist', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_MonModule._t_Song, False, 0), (_M_MonModule._t_SongNotFoundException,))
    MonInterface._op_streamAudio = IcePy.Operation('streamAudio', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())

    _M_MonModule.MonInterface = MonInterface
    del MonInterface

# End of module MonModule
