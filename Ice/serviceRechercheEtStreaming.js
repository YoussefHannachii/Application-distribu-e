//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `serviceRechercheEtStreaming.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let MonModule = _ModuleRegistry.module("MonModule");

    MonModule.Song = class
    {
        constructor(title = "", artist = "", type = "", dateofrelease = "", emplacement = "")
        {
            this.title = title;
            this.artist = artist;
            this.type = type;
            this.dateofrelease = dateofrelease;
            this.emplacement = emplacement;
        }

        _write(ostr)
        {
            ostr.writeString(this.title);
            ostr.writeString(this.artist);
            ostr.writeString(this.type);
            ostr.writeString(this.dateofrelease);
            ostr.writeString(this.emplacement);
        }

        _read(istr)
        {
            this.title = istr.readString();
            this.artist = istr.readString();
            this.type = istr.readString();
            this.dateofrelease = istr.readString();
            this.emplacement = istr.readString();
        }

        static get minWireSize()
        {
            return  5;
        }
    };

    Slice.defineStruct(MonModule.Song, true, true);

    MonModule.SongNotFoundException = class extends Ice.UserException
    {
        constructor(reason = "", _cause = "")
        {
            super(_cause);
            this.reason = reason;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::MonModule::SongNotFoundException";
        }

        _mostDerivedType()
        {
            return MonModule.SongNotFoundException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.reason);
        }

        _readMemberImpl(istr)
        {
            this.reason = istr.readString();
        }
    };

    const iceC_MonModule_MonInterface_ids = [
        "::Ice::Object",
        "::MonModule::MonInterface"
    ];

    MonModule.MonInterface = class extends Ice.Object
    {
    };

    MonModule.MonInterfacePrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(MonModule.MonInterface, MonModule.MonInterfacePrx, iceC_MonModule_MonInterface_ids, 1,
    {
        "getSongByTitle": [, , , , [MonModule.Song], [[7]], ,
        [
            MonModule.SongNotFoundException
        ], , ],
        "getSongByArtist": [, , , , [MonModule.Song], [[7]], ,
        [
            MonModule.SongNotFoundException
        ], , ],
        "streamAudio": [, , , , [7], [[7]], , , , ]
    });
    exports.MonModule = MonModule;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
